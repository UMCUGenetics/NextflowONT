params {

    genome_fasta = '/hpc/diaggen/projects/ONT_C9_workflow/masked_genome/hs1_hm_keep_simplified_SMN_locus.fa'
    genome_mapping_index = '/hpc/diaggen/projects/ONT_C9_workflow/masked_genome/hs1_hm_keep_simplified_SMN_locus.mmi'

    guppy_basecaller_path = '/hpc/diaggen/software/tools/ont-guppy_6.1.2/bin/guppy_basecaller'
    guppy_path = '/hpc/diaggen/software/tools/ont-guppy_6.1.2/'
    guppy_basecaller_config = 'dna_r9.4.1_450bps_modbases_5mc_cg_sup.cfg'
    guppy_basecaller_params = ' -q 100000 --chunks_per_runner 750 --compress_fastq -r' 

    conditions = "sequence_length >= 1000"
    longshotparams = '--min_alt_frac 0.10 --min_cov 6 --min_alt_count 3'

    calling_target_paraphase = '/hpc/diaggen/software/development/NextflowONT/data_files/paraphase_SNPs_UCSC_liftover_T2T_CHM13_manual_SNPs_2_sorted.bed'
    calling_target_region = 'chr5:71300000-71500000'
    homopolymer_bed = "/hpc/diaggen/software/development/NextflowONT/data_files/hs1_hm_keep_simplified_SMN_locus_3homopolymer.bed"
    bed_colums = "CHROM,FROM,TO,RegionRef"
    info_field_homopolymer_bed = "##INFO=<ID=RegionRef,Number=1,Type=String,Description=\"Variant is within specific region in reference genome\">"
    gatk_snp_filter = "--filter-name SNP_LowQualityDepth --filter-expression 'QD < 2.0' --filter-name SNP_MappingQuality --filter-expression 'MQ < 40.0' --filter-name SNP_StrandBias --filter-expression 'FS > 10.0' --filter-name Ref_Homopolymer --filter-expression 'RegionRef > 0'"
    gatk_snp_cluster = "--cluster-size 3 --cluster-window-size 35"
    gatk_indel_filter = "--filter-name INDEL_LowQualityDepth --filter-expression 'QD < 2.0' --filter-name INDEL_StrandBias --filter-expression 'FS > 200.0' --filter-name --filter-name --filter-expression 'ReadPosRankSum < -20.0'"

    roi = ""
    extention = ""

    clair3model = "/usr/local/bin/models/r941_prom_sup_g5014"

    cluster_options = "--mail-user $params.email --mail-type FAIL --account=diaggen"
}

process {

    withLabel: ReBasecallingGuppy {
        cpus = 2
        memory = { 20.GB * task.attempt }
        time = { (3.m * fast5) * task.attempt }
        queue = 'gpu'
        clusterOptions = "$params.cluster_options --gres=tmpspace:32G  --gres=gpu:2g.20gb:1 "

        publishDir {
            path = "$params.outdir/Guppy/"
            mode = 'link'
        }
    }

    withLabel: Clair3_1_0_4_VariantCaller {
        cpus = 4
        memory = { 10.GB * task.attempt }
        time = { 20.m * task.attempt }
    }

    withLabel: Duplex_Tools {
        cpus = 2
        memory = { 10.GB * task.attempt }
        time = { 20.m * task.attempt }
    }

    withLabel: FASTQC_0_11_8 {
        cpus = 2
        memory = { 1.GB * task.attempt }
        time = { 40.m * task.attempt }
        clusterOptions = "$params.cluster_options --gres=tmpspace:10G"

        publishDir {
            path = "$params.outdir/QC/FastQC"
            mode = 'link'
        }
    }

    withLabel: GATK_4_2_1_0_HaplotypeCaller_SMN {
        cpus = 2
        memory = { 10.GB * task.attempt }
        time = { 20.m * task.attempt }
        clusterOptions = "$params.cluster_options --gres=tmpspace:16G"
    }

    withName: GATK_HaplotypeCaller_Region {
        cpus = 2
        memory = { 10.GB * task.attempt }
        time = { 20.m * task.attempt }
        clusterOptions = "$params.cluster_options --gres=tmpspace:16G"
        publishDir = [
            [path: "$params.outdir/vcf", mode: 'link', pattern: '*.vcf.gz'],
            [path: "$params.outdir/vcf", mode: 'link', pattern: '*.tbi'],
            [path: "$params.outdir/vcf", mode: 'link', pattern: '*.vcf'],
            [path: "$params.outdir/vcf", mode: 'link', pattern: '*.idx']
        ]
    }

    withLabel: GATK_4_2_1_0_MergeVcfs {
        cpus = 2
        memory = { 10.GB * task.attempt }
        time = { 40.m * task.attempt }
        clusterOptions = "$params.cluster_options --gres=tmpspace:10G"
    }

    withLabel: GATK_4_2_1_0_VariantFiltrationSnpIndel{
        cpus = 2
        memory = { 10.GB * task.attempt }
        time = { 20.m * task.attempt }
        clusterOptions = "$params.cluster_options --gres=tmpspace:10G"
         publishDir = [
            [path: "$params.outdir/vcf", mode: 'link', pattern: '*.vcf.gz'],
            [path: "$params.outdir/vcf", mode: 'link', pattern: '*.tbi'],
            [path: "$params.outdir/vcf", mode: 'link', pattern: '*.vcf'],
            [path: "$params.outdir/vcf", mode: 'link', pattern: '*.idx']
        ]
    }

    withLabel: Minimap_2_26 {
        cpus = 10
        memory = { 20.GB * task.attempt }
        time = { 90.m * task.attempt }
        clusterOptions = "$params.cluster_options --gres=tmpspace:20G"
    }

    withLabel: Sambamba_1_0_0_Split {
        cpus = 2
        memory = { 20.GB * task.attempt }
        time = { 1.h * task.attempt }
        clusterOptions = "$params.cluster_options --gres=tmpspace:20G"

    }

    withLabel: Sambamba_1_0_0_ViewSort {
        cpus = 10
        memory = { 16.GB * task.attempt }
        time = { 20.m * task.attempt }
        clusterOptions = "$params.cluster_options --gres=tmpspace:20G"
    }

   withLabel: Sambamba_1_0_0_Filter_ROI {
        cpus = 10
        memory = { 16.GB * task.attempt }
        time = { 20.m * task.attempt }
        clusterOptions = "$params.cluster_options --gres=tmpspace:20G"
    }

    withLabel: Sambamba_1_0_0_Filter_Condition {
        cpus = 10
        memory = { 16.GB * task.attempt }
        time = { 30.m * task.attempt }
        clusterOptions = "$params.cluster_options --gres=tmpspace:20G"
    }

    withLabel: Sambamba_1_0_0_Filter_Haplotype {
        cpus = 10
        memory = { 16.GB * task.attempt }
        time = { 30.m * task.attempt }
        clusterOptions = "$params.cluster_options --gres=tmpspace:20G"
        publishDir {
            path = "$params.outdir/bam_files_haplotagged_split"
            mode = 'link'
        }
    }

    withLabel: Sambamba_1_0_0_Merge {
        cpus = 10
        memory = { 48.GB * task.attempt }
        time = { 2.h * task.attempt }
        clusterOptions = "$params.cluster_options --gres=tmpspace:48G"
    }
   
    withLabel: Sambamba_1_0_0_Split {
        cpus = 10
        memory = { 16.GB * task.attempt }
        time = { 20.m * task.attempt }
        clusterOptions = "$params.cluster_options --gres=tmpspace:20G"
        publishDir {
            path = "$params.outdir/bam_files"
            mode = 'link'
        }
    }

    withLabel: Sambamba_1_0_0 {
        cpus = 2
        memory = { 16.GB * task.attempt }
        time = { 20.m * task.attempt }
        clusterOptions = "$params.cluster_options --gres=tmpspace:20G"
    }

    withLabel: Sambamba_1_0_0_Filter {
        cpus = 10
        memory = { 16.GB * task.attempt }
        time = { 20.m * task.attempt }
        clusterOptions = "$params.cluster_options --gres=tmpspace:20G"
    }

    withName: Sambamba_Index_Longshot {
        publishDir {
            path = "$params.outdir/longshot"
            mode = 'link'
            pattern = '*.bai'
        }
    }

    withName: Sambamba_Index_Deduplex {
        publishDir {
            path = "$params.outdir/bam_files"
            mode = 'link'
            pattern = '*.bai'
        }
    }

    withName: Sambamba_Index_Target_Region {
        publishDir {
            path = "$params.outdir/bam_files_haplotagged"
            mode = 'link'
            pattern = '*.bai'
        }
    }

    withName: Sambamba_Index_Target_Paraphase {
        publishDir {
            path = "$params.outdir/bam_files_haplotagged"
            mode = 'link'
            pattern = '*.bai'
        }
    }

    withLabel: Samtools_1_15_Fastq {
        cpus = 2
        memory = { 16.GB * task.attempt }
        time = { 60.m * task.attempt }
        clusterOptions = "$params.cluster_options --gres=tmpspace:20G"
    }
   

    withLabel: Samtools_1_15_AddReadgroup {
        cpus = 2
        memory = { 16.GB * task.attempt }
        time = { 60.m * task.attempt }
        clusterOptions = "$params.cluster_options --gres=tmpspace:10G"
    }

    withLabel: Sniffles2_2_2_VariantCaller {
        cpus = 4
        memory = { 20.GB * task.attempt }
        time = { 20.m * task.attempt }
        clusterOptions = "$params.cluster_options --gres=tmpspace:20G"
         publishDir {
            path = "$params.outdir/sniffles2"
            mode = 'link'
        }

    }

    withLabel: LongshotPhase_0_4_1 {
        cpus = 2
        memory = { 32.GB * task.attempt }
        time = { 8.h * task.attempt }
        clusterOptions = "$params.cluster_options --gres=tmpspace:32G"
        publishDir {
            path = "$params.outdir/longshot"
            mode = 'link'
        }
    }

    withLabel: PICARD_2_26_4_CollectMultipleMetrics {
        cpus = 2
        memory = { 8.GB * task.attempt }
        time = { 2.h * task.attempt }
        clusterOptions = "$params.cluster_options --gres=tmpspace:10G"

        publishDir {
            path = "$params.outdir/QC/Picard"
            mode = 'link'
        }
    }

    withLabel: PICARD_2_26_4_CollectWgsMetrics {
        cpus = 2
        memory = { 8.GB * task.attempt }
        time = { 4.h * task.attempt }
        clusterOptions = "$params.cluster_options --gres=tmpspace:10G"

        publishDir {
            path = "$params.outdir/QC/Picard"
            mode = 'link'
        }
    }

    withLabel: PICARD_2_26_4_FilterSamReads {
        cpus = 2
        memory = { 8.GB * task.attempt }
        time = { 4.h * task.attempt }
        clusterOptions = "$params.cluster_options --gres=tmpspace:10G"
        publishDir {
            path = "$params.outdir/bam_files"
            mode = 'link'
            pattern = '*.bam'        
        }

    }

    withLabel: MultiQC_1_9 {
        cpus = 2
        memory = { 1.GB * task.attempt }
        time = { 5.m * task.attempt }
        publishDir {
            path = "$params.outdir/QC"
            mode = 'link'
        }
    }


    withLabel: SaveInputFile {
        memory = '2G'
        time = '2m'
        publishDir {
            path = "$params.outdir/"
            mode = 'link'
        }
    }
     
    withLabel: VersionLog {
        cpus = 2
        memory = '5G'
        time = '1h'

        publishDir {
            path = "$params.outdir/log"
            mode = 'link'
        }
    }

    withLabel: Whatshap_1_7_Phase {
        cpus = 2
        memory = { 16.GB * task.attempt }
        time = { 30.m * task.attempt }
    }

    withLabel: Whatshap_1_7_Haplotag {
        cpus = 2
        memory = { 16.GB * task.attempt }
        time = { 30.m * task.attempt }
        publishDir {
            path = "$params.outdir/bam_files_haplotagged"
            mode = 'link'
            pattern = '*tagged*.bam'
        }
    }

    withLabel: Workflow_Export_Params {
        cpus = 2
        memory = '5G'
        time = '10m'

        publishDir {
            path = "$params.outdir/log"
            mode = 'link'
        }
    }
   
    withLabel: Tabix_1_11_Zip_Index {
        cpus = 2
        memory = { 8.GB * task.attempt }
        time = { 10.m * task.attempt }
    }
}

report {
    enabled = true
    file = "$params.outdir/log/nextflow_report.html"
}

trace {
    enabled = true
    file = "$params.outdir/log/nextflow_trace.txt"
    fields = 'task_id,hash,native_id,process,tag,name,status,exit,module,container,cpus,time,disk,memory,attempt,submit,start,complete,duration,realtime,queue,%cpu,%mem,rss,vmem,peak_rss,peak_vmem,rchar,wchar,syscr,syscw,read_bytes,write_bytes,vol_ctxt,inv_ctxt'
}

timeline {
    enabled = true
    file = "$params.outdir/log/nextflow_timeline.html"
}

profiles {

    slurm {
        process {
            executor = 'slurm'
            queue = 'cpu'
            clusterOptions = "$params.cluster_options"

            errorStrategy = 'retry'
            maxRetries = 1
        }

        singularity {
            enabled = true
            runOptions = '-B /hpc:/hpc -B $TMPDIR:$TMPDIR'
            autoMounts = true
            cacheDir = '/hpc/diaggen/software/singularity_cache'
        }

        executor {
            queueSize = 1000
            pollInterval = '1min'
            queueStatInterval = '5min'
            submitRatelimit = '10sec'
        }

       mail {
            smtp.host = 'localhost'
        }
    }

    mac {
        docker.enabled = true
        docker.runOptions = '-v /Users:/Users'
    }
}
